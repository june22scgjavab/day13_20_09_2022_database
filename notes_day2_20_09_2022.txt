
The following are the various catagories of SQL statements:-
DDL (CREATE, ALTER, TRUNCATE, DROP)
DML (SELECT,INSERT,UPDATE,DELETE)
TCL
DCL
DQL Data Query Language ( select command )



DDL statements:-
CREATE TABLE <tablename>(
columnname1 datatype,
columnname2 datatype,
columnnameN datatype
)

CREATE TABLE student(
roll INTEGER,
name VARCHAR2(20),
marks INTEGER,
dob DATE
)

-- In the above create statement we can see that the keywords like CREATE,TABLE
   INTEGER,VARCHAR2,DATE are written in uppdercase. So though SQL is not case
   sensitive. We follow the convention of writing the keyword in uppercase.
---------------------------------------------------------------------------------------------------------------
Constraints ( Restriction/Validations)
* PRIMARY KEY
* NOT NULL
* UNIQUE 
* CHECK
* FOREIGN KEY
* DEFAULT( But in Oracle , default is not considered as a Constraint)
------------------------------------------------------------------------------------------------------------------
* Column level constraint
* Table level constraint
-----------------------------------------------------------------------------------------------------------------
* Column level constraint

  CREATE TABLE student(
   roll INTEGER CONSTRAINT pk PRIMARY KEY,
   name VARCHAR2(20),
   marks INTEGER
  )
  CREATE TABLE employee(
   empId INTEGER CONSTRAINT pk PRIMARY KEY,
   name VARCHAR2(20),
   basic INTEGER
  )
-- In the above two create statements, while creating the second create statement,
-- It will show error because we already have a constraint with the name pk. So
-- constraint name should be unique in a database and we cannot repeat the same
-- constraint name. So always try to give the constraint name involving the tablename
-- column name. Now we all know that tablename will be unique in a database. 
-- Which means we cannot have a table with the same name which is already existing in
-- the database.

CREATE TABLE student(
   roll INTEGER CONSTRAINT student_roll_pk PRIMARY KEY,
   name VARCHAR2(20),
   marks INTEGER
  )


-- The above SQL statement is an example of column level constraint where we
-- are mentioning the constraint information while declaring the column.

 CREATE TABLE student(
   roll INTEGER  PRIMARY KEY,
   name VARCHAR2(20),
   marks INTEGER
  )
-- In the above create table with the constraint we have not provided any name.
-- So in that case the Oracle DBMS itself provides a system generated name for the 
-- constraint.

CONSTRAINTS NAME IN A DATABASE SHOULD BE UNIQUE.



So why I should have user defined constraint name when we have system defined name?
A : User defined name is useful as it is known to us and with the names we can drop
   the constraints or with the name ,we can enable or disable constraints.

------------------------------------------------------------------------------------------------------------
Table level constraint:-


CREATE TABLE student(
   roll INTEGER, 
   name VARCHAR2(20),
   marks INTEGER,
   CONSTRAINT student_roll_pk PRIMARY KEY(roll)
  )

OR

CREATE TABLE student(
   roll INTEGER, 
   CONSTRAINT student_roll_pk PRIMARY KEY(roll),
   name VARCHAR2(20),
   marks INTEGER
   )

-- The above two create statements are example of table level constraint as we 
-- are not mentioning the constraint along with the column but just with the table, 
-- it is called as table level constraint.  So it is your choice to go for table level
-- or column level constraint but in some cases it is mandatory to follow either column
-- level or table level and there we dont have the alternative way.

Example when we design composite primary key ( A primary key created by combining two or 
more columns). Now if you try to define a composite primary key at column level, it 
is not possible.

Let us take the example of Student attending different courses.


CREATE TABLE student(
  studentid INTEGER primary key,
  courseid INTEGER primary key,
  marks INTEGER
)

-- The above create statement will show error as we cannot have two primary keys
-- in the same table. So it is mandatory to create a composite primary key at table level
-- as we dont have the other alternative ( column level constraint).


CREATE TABLE student(
  studentid INTEGER,
  courseid INTEGER,
  marks INTEGER,
  CONSTRAINT student_studid_cors_id_cpk PRIMARY KEY(studentid,courseid)
)

CREATE TABLE student(
  studentid INTEGER,
  courseid INTEGER,
  marks INTEGER,
  PRIMARY KEY(studentid,courseid)
)
---------------------------------------------------------------------------------------------------------

NOT NULL constraint ====> NOT NULL constraint can be applied on column level only.
WE cannot apply NOT NULL constraint at table level which means I cannot write/

CREATE TABLE student(
  roll INTEGER PRIMARY KEY,
  name VARCHAR2(20),
  marks INTEGER,
  CONSTRAINT student_roll_nn NOT NULL(name)
)

We have to write as 
 
CREATE TABLE student(
  roll INTEGER PRIMARY KEY,
  name VARCHAR2(20) CONSTRAINT student_name_nn NOT NULL,
  marks INTEGER

)

 
CREATE TABLE student(
  roll INTEGER PRIMARY KEY,
  name VARCHAR2(20) NOT NULL,
  marks INTEGER
)


-----------------------------------------------------------------------------------------------------------

UNIQUE KEY CONSTRAINT:-
The differences of UNIQUE KEY with PRIMARY KEY:
1) We can have multiple unique keys per table.
2) Unique keys can contain null values also. But in primary key we cannot have a NULL value.


CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER CONSTRAINT employee_voterid_unq UNIQUE,
  dob DATE
)

CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER UNIQUE,
  dob DATE
)

CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  UNIQUE(voterid)
)


CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  CONSTRAINT employee_voterid_unq UNIQUE(voterid)
)
-- Unique constraint can be applied both in table level and column level.

------------------------------------------------------------------------------------------------------------------------
CHECK CONSTRAINT : To validate for the data or to implement domain integrity. Domain integrity means a particular column can
 have a value from a given or mentioned list.

CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  designation VARCHAR2(30) CHECK (designation IN('Mgr','AsstMgr','Dev')), 
  department VARCHAR2(30) CHECK (department IN('Sales','Mkt','HR')),
  CONSTRAINT employee_voterid_unq UNIQUE(voterid)
)

OR

CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  designation VARCHAR2(30) CONSTRAINT employee_desig_chk CHECK (designation IN('Mgr','AsstMgr','Dev')), 
  department VARCHAR2(30) CONSTRAINT employee_dept_chk  CHECK (department IN('Sales','Mkt','HR')),
  CONSTRAINT employee_voterid_unq UNIQUE(voterid)
)

-- So the above example is of column level check constraint.

CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  designation VARCHAR2(30), 
  department VARCHAR2(30),
  CONSTRAINT employee_voterid_unq UNIQUE(voterid),
  CHECK (designation IN('Mgr','AsstMgr','Dev')), 
  CHECK (department IN('Sales','Mkt','HR'))
)


CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  designation VARCHAR2(30), 
  department VARCHAR2(30),
  CONSTRAINT employee_voterid_unq UNIQUE(voterid),
  CONSTRAINT employee_desig_chk CHECK (designation IN('Mgr','AsstMgr','Dev')), 
  CONSTRAINT employee_dept_chk CHECK (department IN('Sales','Mkt','HR'))
)

Q In which situation it becomes mandatory to write table level constraint?
A We go for table level constraint when the constraint is dependent on multiple columns for its validity.


CREATE TABLE employee(
  id INTEGER CONSTRIANT employee_id_pk,
  name VARCHAR2(20) CONSTRAINT employee_name_nn NOT NULL,
  voterid INTEGER,
  dob DATE,
  designation VARCHAR2(30), 
  department VARCHAR2(30),
  basic INTEGER,
  hra INTEGER, -- HRA should be equivalent to the monthly allowance
  allowance INTEGER,
  CONSTRAINT employee_voterid_unq UNIQUE(voterid),
  CONSTRAINT employee_desig_chk CHECK (designation IN('Mgr','AsstMgr','Dev')), 
  CONSTRAINT employee_dept_chk CHECK (department IN('Sales','Mkt','HR')),
  CONSTRAINT employee_basic_chk CHECK (basic>20000),
  CONSTRAINT employee_hra_chk CHECK ( hra=allowance)
)
-- In the above example for HRA value it is mandatory to put the check constraint at a table level because here the value of 
-- hra is dependent on another column which is allowance
------------------------------------------------------------------------------------------------------------------------------------
Referential Integrity ( Foreign key)

We have student and their Address data stored but in two different tables. One is student and another is address.
So what will happen if we dont put a relationship or we dont refer/link the tables?


CREATE TABLE address(
hno INTEGER PRIMARY KEY,
locality VARCHAR2(30),
city VARCHAR2(30)
);

INSERT INTO address VALUES(101,'Nelson Street','Salt Lake City');
INSERT INTO address VALUES(102,'Subhash Street','Kolkata');


CREATE TABLE student(
roll INTEGER PRIMARY KEY,
name VARCHAR2(30),
hno INTEGER
);

INSERT INTO student VALUES(1,'John',200); -- This data will be accepted as there is no check with the address table as we have not set any relationship between address and student table.
-----------------------------------------------------------------------------------------------------------------
DROP TABLE address;
DROP TABLE student;
---------------------------------------------------------------------------

CREATE TABLE address(
hno INTEGER PRIMARY KEY,
locality VARCHAR2(30),
city VARCHAR2(30)
);

INSERT INTO address VALUES(101,'Nelson Street','Salt Lake City');
INSERT INTO address VALUES(102,'Subhash Street','Kolkata');


CREATE TABLE student(
roll INTEGER PRIMARY KEY,
name VARCHAR2(30),
hno INTEGER CONSTRAINT student_hno_fk REFERENCES address(hno)
);

CREATE TABLE student(
roll INTEGER PRIMARY KEY,
name VARCHAR2(30),
hno INTEGER  REFERENCES address(hno)
);


INSERT INTO student VALUES(1,'John',200); -- In this case we wont be able to insert
-- the record as the hno 200 is checked in the parent table address. We dont have
-- any hno 200 in the parent or master table address. 
INSERT INTO student VALUES(1,'John',101);

CREATE TABLE student(
roll INTEGER PRIMARY KEY,
name VARCHAR2(30),
hno INTEGER,
CONSTRAINT student_hno_fk FOREIGN KEY(hno) REFERENCES address(hno)
);
-- In the above SQL we have created a foreign key constraint at the table level.
----------------------------------------------------------------------------------------------------------------------------------

 CREATE TABLE Student (
2     StudentId INTEGER PRIMARY KEY (StudentId),
3     FName VARCHAR2(10) CONSTRAINT NOT NULL,
4     LName VARCHAR2(10) CHECK (FName <> LName),
5     DOJ DATE DEFAULT,
6     Gender CHAR(1) CONSTRAINT Student_Gender_Ck CHECK Gender IN('M', 'F'),
7     PersonId INTEGER FOREIGN KEY REFERENCES Person(PersonId));

Line 2: We should not write StudentId in paranthesis ()
Line 3: Constraint name is not present.
Line 4: We are applying check constraint at column level when the constraint is applied on two columns.It should
        be at table level.
Line 5: We have not mentioned the default value. [ Hint: DOJ DATE DEFAULT '01-Jan-2022']
Line 6: The check constraint condition should be within brackets.
Line 7: We dont write FOREIGN KEY , when we are defining the column level constraint.
----------------------------------------------------------------------------------------------------------------------------------
INSERTING RECORDS/TUPLES in a table

CREATE TABLE employeedetails(
id INTEGER ,
firstname VARCHAR2(20) NOT NULL,
middlename VARCHAR2(20),
lastname VARCHAR2(20) NOT NULL,
mobile INTEGER UNIQUE,
CONSTRAINT employee_id_pk PRIMARY KEY(id)
);

INSERT INTO employeedetails VALUES(1,'Suresh','Kumar','Sethi',8756412390);
INSERT INTO employeedetails VALUES(2,'Sai',NULL,'Sudha',9156412370);

-- In the above two lines we inserted the same number of columns and also the same
-- sequence which means we inserted the data for 5 columns and in the same sequence of 
-- the table creation. In the table we have id,firstname,middlename,lastname and mobilenumber.

Can we change the sequence of the data while inserting the records? Suppose I want to insert
mobile number after the id and enter lastname after mobile number followed by middlename and
firstname.
A Yes . It is possible. In that case you have to mention the sequence in which you want to insert the
data.

INSERT INTO employeedetails VALUES(3,8156432371,'Shankar',NULL,'Nitin');  // We should not write the
// way we wrote. We should mention the column name of changed sequence.

INSERT INTO employeedetails(id,mobile,lastname,middlename,firstname) VALUES(3,8156432371,'Shankar',NULL,'Nitin'); 
-- The above insert is correct when we change the sequence for the data entry of the columns. 

Another case where we can provide the column name is when we dont want to insert value for a column/columns.
I want to keep middlename NULL
INSERT INTO employeedetails(id,firstname,lastname,mobile) VALUES(4,'Sudhakar','Suresh',7166472370); 
OR
INSERT INTO employeedetails VALUES(2,'Sai',NULL,'Sudha',9156412370); -- This is another way to insert null
-- value for a column data


INSERT INTO employeedetails(id,firstname,middlname,lastname,mobile) VALUES(5,'Rohit','kumar','Sharma',9166467373);
-- The above way of writing is also good and can be used because here we are mentioning the sequence and name
-- of the columns. Though here we have not skipped any of the column of the table.

-----------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE employeedetails(
id INTEGER ,
firstname VARCHAR2(20) NOT NULL,
middlename VARCHAR2(20),
lastname VARCHAR2(20) NOT NULL,
mobile INTEGER UNIQUE,
CONSTRAINT employee_id_pk PRIMARY KEY(id)
);

INSERT INTO employeedetails VALUES(1,'Suresh','Kumar','Sethi',8756412390);
INSERT INTO employeedetails VALUES(2,'Sai',NULL,'Sudha',9156412370);


CREATE TABLE employeedetailsbackup(
id INTEGER,
firstname VARCHAR2(20) NOT NULL,
mobile INTEGER UNIQUE,
CONSTRAINT employee_id_pk PRIMARY KEY(id)
);

INSERT INTO employeedetailsbackup(id,firstname,mobile) SELECT id,firstname,mobile FROM employeedetails;


The employeedetails is already existing with data.
employeedetailsbackup is created but with no data.
With the statement 
INSERT INTO employeedetailsbackup(id,firstname,mobile) SELECT id,firstname,mobile FROM employeedetails;

We are basically copying the data from employeedetails table.
INSERT INTO employeedetailsbackup(id,mobile) SELECT id,mobile FROM employeedetails;

Can we give a condition for the select statement?
Yes
INSERT INTO employeedetailsbackup(id,mobile) SELECT id,mobile FROM employeedetails WHERE id=2;
------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO employeedetails VALUES(6,'Kavita','Senghani',6755412310);

-- The above insertion of the record will show error as not enough values. 
If column names are not used then values must be provided for all columns in the order of their specification during table creation.
If column names are used then the data provided in the values clause must have the same data type of column at same position.
INSERT INTO employeedetails(id,firstname,lastname,mobile) VALUES(4,7166472370,'Sudhakar','Suresh'); 
-- The above command we are not sticking to the data type of the column and the datatype of the values.
------------------------------------------------------------------------------------------------------------------------------------
While inserting data, column values should match column type definition(e.g., you can’t insert a textual value into the numerical column/attribute). If the column is of strings or date time or characters, they need to be enclosed in single quotes(You cannot use double quotes). String data is case sensitive and will be stored as given within quotes. If the data is numeric, you don't need the quotes. NULL also should not be enclosed with quotes.
--------------------------------------------------------------------------------------------------------------------------------------
Table-------------------------------------- SELECT COMMAND(SELECT * FROM employeedetails)---------------------> Result table (ad-hoc)
id fname  mname lname  mobile
1  Suresh Kumar Sethi 8756412390                                                                   1  Suresh Kumar Sethi 8756412390
2  Sai    NULL  Sudha 9156412370

---------------------------------------------------------------------------------------------------------------------
Table---------------------SELECT COMMAND(SELECT * FROM employeedetails WHERE basic>20000)---------------------> Result table (ad-hoc)
id fname  mname lname  mobile     basic
1  Suresh Kumar Sethi 8756412390  10000                                              2  Sai    NULL  Sudha 9156412370  21000       
2  Sai    NULL  Sudha 9156412370  21000



CREATE TABLE employeedetails(
id INTEGER ,
firstname VARCHAR2(20) NOT NULL,
middlename VARCHAR2(20),
lastname VARCHAR2(20) NOT NULL,
mobile INTEGER UNIQUE,
CONSTRAINT employee_id_pk PRIMARY KEY(id)
);

INSERT INTO employeedetails VALUES(1,'Suresh','Kumar','Sethi',8756412390);
INSERT INTO employeedetails VALUES(2,'Sai',NULL,'Sudha',9156412370);


-- Display the details of all the employees

SELECT * FROM employeedetails; -- * means all the columns ( namely id,firstname,middlename,lastname and mobile)

-- Display the id and firstname for all the employees
SELECT id,firstname FROM employeedetails; -- display the column id and firstname for all the rows/records.


-- Display firstname and id from the employee table for all the records
SELECT firstname,id FROLM employeedetails; 


Q I need to add a new column basic of INTEGER datatype
A ALTER TABLE employeedetails ADD basic INTEGER;

INSERT INTO employeedetails VALUES(3,'James',NULL,'Jordan',9156422361,20000);
INSERT INTO employeedetails VALUES(4,'Sudhir','Ranjan','Tiwari',7256422368,30000);


-- Display the id and firstname for all the employees whose basic is more than 10000.
SELECT id,firstname FROM employeedetails WHERE basic>10000;

-- Display the id and firstname for all the employees whose basic is more than 10000 or equal to 10000.
SELECT id,firstname FROM employeedetails WHERE basic>=10000;


-- Display the id and firstname,lastname for all the employees whose basic is less than 10000.
SELECT id,firstname,lastname FROM employeedetails WHERE basic<10000;


-- Display the id and firstname for all the employees whose basic is less than 10000 or equal to 10000.
SELECT id,firstname,lastname FROM employeedetails WHERE basic<=10000;


-- Display the id,firstname and basic for all the employees where basic is between 10000 and 20000.
SELECT id,firstname,basic FROM employeedetails WHERE basic>=10000 AND basic<=20000;
OR
SELECT id,firstname,basic FROM employeedetails WHERE basic BETWEEN 10000 AND 20000;

---------------------------

int num[]={1,2,3,4,5};

for(int n : num){

System.out.println(n);
}